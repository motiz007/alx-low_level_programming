!<arch>
0-isupper.c/    0           0     0     644     228       `
#include "main.h"
/**
 * _isupper- checks for uppercase character
 * @c: the input it takes in
 * Return: 1 if true, 0 if false
 */
int _isupper(int c)
{
	if (c >= 65 && c <= 90)
	{
		return (1);
	}
	else
	{
		return (0);
	}
}

0-memset.c/     0           0     0     644     345       `
#include "main.h"
/**
 * _memset- sets the first n bites of input to a const value
 * @s: the string to be modified
 * @b: the const used to fill
 * @n: the number of bytes to fill
 * Return: s (the modified string)
 */
char *_memset(char *s, char b, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
	{
		s[i] = b;
	}
	return (s);
}

0-strcat.c/     0           0     0     644     352       `
#include "main.h"
/**
 * _strcat- appends scr to dest string
 * @dest: the string to append to
 * @src: the string to append from
 * Return: dest
 */
char *_strcat(char *dest, char *src)
{
	int i;
	int j;
	int len = 0;

	for (i = 0; dest[i] != '\0'; i++)
	{
		len++;
	}
	for (j = 0; src[j] != '\0'; j++)
	{
		dest[len++] = src[j];
	}
	return (dest);
}
100-atoi.c/     0           0     0     644     404       `
#include "main.h"

/**
 * _atoi - convert a string to an integer.
 * @s: the string to be comverted.
 *
 *Return: The integer value of the comverted string.
 */

int _atoi(char *s)
{
	int sign = 1;
	unsigned int num = 0;

	do {

		if (*s == '-')
			sign *= -1;

		else if (*s >= '0' && *s <= '9')
			num = (num * 10) + (*s - '0');

		else if (num > 0)
			break;
	} while (*s++);

	return (num * sign);
}
1-isdigit.c/    0           0     0     644     215       `
#include "main.h"
/**
 * _isdigit- checks for a digit 0-9
 * @c: input it recieves
 * Return: 1 if true, 0 if false
 */
int _isdigit(int c)
{
	if (c >= 48 && c <= 57)
	{
		return (1);
	}
	else
	{
		return (0);
	}
}

1-memcpy.c/     0           0     0     644     333       `
#include "main.h"
/**
 * _memcpy- copies n bytes from source to destination
 * @dest: the destination string
 * @src: the source string
 * @n: the number of bytes to copy
 * Return: dest
 */
char *_memcpy(char *dest, char *src, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
	{
		dest[i] = src[i];
	}
	return (dest);
}

1-strncat.c/    0           0     0     644     425       `
#include "main.h"
/**
*_strncat - appends a string upto the nth item
* @dest : the string to append to
* @src : the string to append from
* @n : the number of char to append
* Return: dest
*/

char *_strncat(char *dest, char *src, int n)
{
	int i;
	int j;
	int len = 0;

	for (i = 0; dest[i] != '\0'; i++)
	{
		len++;
	}
	for (j = 0; src[j] != '\0'; j++)
	{
		if (j < n)
		{
			dest[len++] = src[j];
		}
	}
	return (dest);
}

2-strchr.c/     0           0     0     644     356       `
#include "main.h"
/**
 * _strchr- searches for the occurence of a character from a string
 * @s: the string to search from
 * @c: the character to search for
 * Return: pointer to s if found, NULL if not found
 */
char *_strchr(char *s, char c)
{
	int i;

	for (i = 0; s[i] >= '\0'; i++)
	{
		if (s[i] == c)
		{
			return (s + i);
		}
	}
	return ('\0');
}
2-strlen.c/     0           0     0     644     219       `
#include "main.h"
/**
 * _strlen- counts the size of a string
 * @s: the input it recieves
 * Return: length
 */
int _strlen(char *s)
{
	int length = 0;

	while (*s != '\0')
	{
		length++;
		s++;
	}
	return (length);
}

2-strncpy.c/    0           0     0     644     373       `
#include "main.h"
/**
 * _strncpy- copies n items to another string
 * @src: string to copy from
 * @dest: string to copy to
 * @n: number of items to copy
 * Return: dest
 */
char *_strncpy(char *dest, char *src, int n)
{
	int i;

	i = 0;

	while (src[i] != '\0' && i < n)
	{
		dest[i] = src[i];
		i++;
	}

	while (i < n)
	{
		dest[i] = '\0';
		i++;
	}

	return (dest);
}

3-islower.c/    0           0     0     644     238       `
#include "main.h"
/**
 * _islower- checks is a letter is lower case
 * @c: integer value it recieves
 * Return: 1 if true. 0 if false
 */
int _islower(int c)
{
	if ((c >= 97) && (c <= 122))
	{
		return (1);
	}
	else
	{
		return (0);
	}
}
3-puts.c/       0           0     0     644     219       `
#include "main.h"
/**
 * _puts- prints a string to stdout
 * @str: the string it recieves
 * Return: void
 */
void _puts(char *str)
{
	int i;

	for (i = 0; str[i] != 0; i++)
	{
		_putchar(str[i]);
	}
	_putchar('\n');
}

3-strcmp.c/     0           0     0     644     430       `
#include "main.h"
/**
 * _strcmp- compares two strings
 * @s1: the first string to compare
 * @s2: the second string ro compare
 * Return: count
 */
int _strcmp(char *s1, char *s2)
{
	int i;
	int count = 0;

	for (i = 0; s1[i] != '\0'; i++)
	{
		if (s1[i] > s2[i])
		{
			count = s1[i] - s2[i];
			break;
		}
		else if (s1[i] < s2[i])
		{
			count = s1[i] - s2[i];
			break;
		}
		else
		{
			count = 0;
		}
	}
	return (count);
}
3-strspn.c/     0           0     0     644     454       `
#include "main.h"
/**
 * _strspn- checks length of initial substring that contains
 *          only certain characters.
 * @s: the string to check
 * @accept: the chars to check for
 * Return: length
 */
unsigned int _strspn(char *s, char *accept)
{
	unsigned int c = 0;
	char *t = accept;

	while (*s++)
	{
		while (*accept++)
			if (*(s - 1) == *(accept - 1))
			{
				c++;
				break;
			}
		if (!(*--accept))
			break;
		accept = t;
	}
	return (c);
}
4-isalpha.c/    0           0     0     644     248       `
#include "main.h"
/**
 * _isalpha- checks whether input is alphabet
 * @c: input it recieves
 * Return: 1 if true. 0 if false
 */
int _isalpha(int c)
{
	if (((c >= 97) && (c <= 122)) || ((c >= 65) && (c <= 90)))
		return (1);
	else
		return (0);
}
4-strpbrk.c/    0           0     0     644     461       `
#include "main.h"
/**
 * _strpbrk- searches for the first occurence of a particular char
 *           that is contained in a string
 * @s: the string to be searched
 * @accept: the combination of chars to search from
 * Return: s
 */
char *_strpbrk(char *s, char *accept)
{
	int i;
	int j = 0;

	i = 0;
	for (i = 0; s[i] != '\0'; i++)
	{
		for (j = 0; accept[j] != '\0'; j++)
		{
			if (s[i] == accept[j])
			{
				return (s + i);
			}
		}
	}
	return ('\0');
}

5-strstr.c/     0           0     0     644     580       `
#include "main.h"
/**
 * _strstr- search for the first occurrence of a substring from another string
 * @haystack: the string to search from
 * @needle: the string to search for
 * Return: haystack if found, NULL if not found
 */
char *_strstr(char *haystack, char *needle)
{
	int index;

	if (*needle == 0)
		return (haystack);

	while (*haystack)
	{
		index = 0;

		if (haystack[index] == needle[index])
		{
			do {
				if (needle[index + 1] == '\0')
					return (haystack);

				index++;

			} while (haystack[index] == needle[index]);
		}

		haystack++;
	}

	return ('\0');
}
6-abs.c/        0           0     0     644     269       `
#include "main.h"
/**
 *  _abs- computes absolute value of an integer
 *  @num: the number it recieves to be converted
 *  Return: pnum absolute value of the input
 */
int _abs(int num)
{

	if (num < 0)
	{
		num = num * -1;
	}
	else
	{
		num = num;
	}
	return (num);
}

9-strcpy.c/     0           0     0     644     300       `
#include "main.h"
/**
 * *_strcpy- copies one string into another
 * @src: the string to be copied
 * @dest: the string to be copied to
 * Return: *dest
 */
char *_strcpy(char *dest, char *src)
{
	int i;

	for (i = 0; src[i] != '\0'; i++)
	{
		dest[i] = src[i];
	}
	dest[i] = '\0';
	return (dest);
}
main.c/         0           0     0     644     148       `
#include "main.h"

int main(void)
{
    _puts("\"At the end of the day, my goal was to be the best hacker\"\n\t- Kevin Mitnick");
    return (0);
}
_putchar.c/     0           0     0     644     248       `
#include <unistd.h>

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}

